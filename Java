<xaiArtifact artifactid="bcd093b4-2350-4752-907b-b940fba34047" artifactversionid="4865da1f-153a-4da0-a83b-c09754defb6d" title="TelegramBot.java" contentType="text/x-java">
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetChat;
import org.telegram.telegrambots.meta.api.methods.GetChatMember;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.ChatMember;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class TelegramBot extends TelegramLongPollingBot {
    private static final String BOTTOKEN = "8190736614:AAGY_tJuXA2mT3wrVoeem__0RijlTGPLHGo"; // Замените на ваш токен
    private static final String CHANNELLINK = "https://t.me/modka_777"; // Замените на ссылку вашего канала
    private static final long CHANNELID =  -1001911114298; // Замените на ID вашего канала (например, -100123456789)
    private static final long ADMINID = 5131311133; // Замените на ваш ID
    private static final String DBURL = "jdbc:sqlite:contest.db";

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    public TelegramBot() {
        initDb();
        scheduleTasks();
    }

    @Override
    public String getBotToken() {
        return BOTTOKEN;
    }

    @Override
    public String getBotUsername() {
        return "@STARSBYYEBOT"; // Замените на имя вашего бота
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String command = update.getMessage().getText();
            long userId = update.getMessage().getFrom().getId();
            String username = update.getMessage().getFrom().getUserName() != null ?
                    update.getMessage().getFrom().getUserName() : "NoUsername";

            if (command.equals("/start")) {
                registerUser(userId, username);
            }
        }
    }

    private void initDb() {
        try (Connection conn = DriverManager.getConnection(DBURL);
             Statement stmt = conn.createStatement()) {
            stmt.execute("CREATE TABLE IF NOT EXISTS users (" +
                    "userid INTEGER PRIMARY KEY, " +
                    "username TEXT, " +
                    "bio TEXT, " +
                    "lastchecked TEXT, " +
                    "changed INTEGER DEFAULT 0, " +
                    "subscribed INTEGER DEFAULT 1)");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void registerUser(long userId, String username) {
        try {
            Chat chat = execute(new GetChat(String.valueOf(userId)));
            String bio = chat.getBio() != null ? chat.getBio() : "";
            String now = LocalDateTime.now().format(DateTimeFormatter.ISOLOCALDATETIME);

            try (Connection conn = DriverManager.getConnection(DBURL);
                 PreparedStatement pstmt = conn.prepareStatement(
                         "INSERT OR REPLACE INTO users (userid, username, bio, lastchecked, subscribed) VALUES (?, ?, ?, ?, ?)")) {
                pstmt.setLong(1, userId);
                pstmt.setString(2, username);
                pstmt.setString(3, bio);
                pstmt.setString(4, now);
                pstmt.setInt(5,
